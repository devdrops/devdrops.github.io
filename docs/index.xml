<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevDrops</title>
    <link>https://devdrops.github.io/</link>
    <description>Recent content on DevDrops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://devdrops.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tmux: Movendo Janelas entre Sess√µes</title>
      <link>https://devdrops.github.io/posts/tmux-movendo-janelas-entre-sessoes/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/tmux-movendo-janelas-entre-sessoes/</guid>
      <description>Dica quente para quem usa tmux.
A Situa√ß√£o Normalmente, eu trabalho com v√°rias sess√µes, uma para cada projeto e cada uma com as suas janelas. Eu criei uma sess√£o para um projeto (vou cham√°-la de A), e nela eu tinha as seguintes janelas, cada uma para a sua finalidade:
‚îî‚îÄ‚îÄ A ‚îú‚îÄ‚îÄ Janela 0: Vim ‚îú‚îÄ‚îÄ Janela 1: Comandos de terminal ‚îú‚îÄ‚îÄ Janela 2: Comandos de git ‚îî‚îÄ‚îÄ Janela 3: Monitorando imagens Docker S√≥ que, por engano, eu criei uma nova janela com um comando que eu gostaria de organizar em outra sess√£o, s√≥ para eu n√£o me confundir (uma sess√£o por projeto), ficando assim:</description>
    </item>
    
    <item>
      <title>PostgreSQL: Inicializar Banco de Dados com Docker</title>
      <link>https://devdrops.github.io/posts/postgresql-inicializar-banco-de-dados-com-docker/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/postgresql-inicializar-banco-de-dados-com-docker/</guid>
      <description>Este texto serve como um complemento a um texto anterior daqui do blog, PostgreSQL: Dicas para Uso de Arquivos SQL.
Antes de Prosseguir Esse texto oferece uma abordagem do PostgreSQL com imagem Docker. Caso esse n√£o seja o seu caso, recomendo conferir a documenta√ß√£o do banco de dados e/ou das ferramentas do ambiente que voc√™ est√° usando.
A Situa√ß√£o Na cria√ß√£o de um projeto, eu j√° tinha um arquivo SQL preparado para a cria√ß√£o do meu banco de dados, semelhante ao arquivo descrito no post citado acima.</description>
    </item>
    
    <item>
      <title>Vim: Definindo syntax Sem Mudar filetype</title>
      <link>https://devdrops.github.io/posts/vim-definindo-syntax-sem-mudar-filetype/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/vim-definindo-syntax-sem-mudar-filetype/</guid>
      <description>Essa √© uma dica r√°pida para quem usa Vim no dia a dia.
A Situa√ß√£o Uns tempos atr√°s, estava observando um projeto feito com TypeScript + React, com arquivos .tsx. No meu caso, minha instala√ß√£o de Vim n√£o sabia identificar a sintaxe (syntax) desses arquivos, deixando tudo com cara de texto comum.
Como gosto de usar estilo nos arquivos, comecei a pensar em como poderia trazer a sintaxe sem sobrescrever o tipo de arquivo (filetype), que o Vim reconhecia como typescriptreact.</description>
    </item>
    
    <item>
      <title>Autentica√ß√£o http-basic no Composer</title>
      <link>https://devdrops.github.io/posts/autenticacao-http-basic-no-composer/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/autenticacao-http-basic-no-composer/</guid>
      <description>Segue uma dica r√°pida, com uso tanto para ambiente com ou sem Docker üòâ
Antes de Seguir&amp;hellip; As instru√ß√µes aqui informam dicas de como usar autentica√ß√£o para download de depend√™ncias com Composer. Meu foco maior √© usando Docker e Docker Compose, mas os comandos em ess√™ncia podem ser usados em qualquer ambiente.
A Situa√ß√£o Uma vez, trabalhando com um projeto em PHP, observei que uma das depend√™ncias a instalar com Composer exigia autentica√ß√£o para o download.</description>
    </item>
    
    <item>
      <title>MongoDB e Docker</title>
      <link>https://devdrops.github.io/posts/mongodb-e-docker/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/mongodb-e-docker/</guid>
      <description>Anota√ß√£o simples e r√°pida de como usei MongoDB com Docker apenas para aprendizado.
Antes de Seguir&amp;hellip; Todos os comandos abaixo foram feitos em ambiente Linux (no caso, Linux Mint), usando apenas Docker.
A Situa√ß√£o Eu queria usar o mongosh via terminal em uma imagem Docker, para executar comandos apenas via linha de comando.
Fui atr√°s de uma imagem que tivesse o que precisava, e escolhi a mongodb/mongodb-community-server. Por√©m, ao execut√°-la, percebi que o entrypoint (comando configurado para iniciar a execu√ß√£o da imagem) j√° estava definido para inicializar o banco de dados, o que impedia de usar o mongosh &amp;ldquo;de cara&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>PostgreSQL: Dicas para Uso de Arquivos SQL</title>
      <link>https://devdrops.github.io/posts/postgresql-dicas-para-uso-de-arquivos-sql/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/postgresql-dicas-para-uso-de-arquivos-sql/</guid>
      <description>Recentemente, tive que fazer algumas opera√ß√µes com banco de dados PostgreSQL atrav√©s de arquivos SQL, e pude aprender um bocado de dicas. Vou compartilhar esses conhecimentos abaixo, espero que te ajude tamb√©m - como me ajudaram muito!
Ao final deste texto, voc√™ poder√°:
Criar banco de dados e tabelas apenas se os mesmos n√£o existirem; Selecionar em qual banco de dados as tabelas ser√£o criadas; Trabalhar com campos incrementais e valores padr√£o; Trabalhar com timezones; Trabalhar com cria√ß√£o autom√°tica de UUIDs; Tudo isso em um s√≥ arquivo SQL, para importar e criar o que voc√™ precisa.</description>
    </item>
    
    <item>
      <title>Mysqldump de um container Docker</title>
      <link>https://devdrops.github.io/posts/mysqldump-de-um-container-docker/</link>
      <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/mysqldump-de-um-container-docker/</guid>
      <description>Este texto √© uma tradu√ß√£o de um escrito que fiz em 2016, em ingl√™s, e at√© hoje ainda recebe coment√°rios. Por isso, decidi traduzir para Portugu√™s do Brasil, mas, se quiser conferir o original, o link √© este aqui. Para melhorar o entendimento, vou adicionar alguns coment√°rios e explica√ß√µes a mais, que possam enriquecer as informa√ß√µes.
Antes de prosseguir Este tutorial parte do princ√≠pio que voc√™ tem Docker instalado corretamente, com pelo menos uma imagem do banco de dados MySQL, em um ambiente do SO Linux.</description>
    </item>
    
    <item>
      <title>Go: comandos CLI, parte 2</title>
      <link>https://devdrops.github.io/posts/go-comandos-cli-parte-2/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/go-comandos-cli-parte-2/</guid>
      <description>Este texto faz parte de uma s√©rie de 3 materiais no assunto:
Parte 1: bug, build, clean e doc Parte 2: env, fix, fmt, generate, get e install Parte 3: list, mod, run, test, tool, version e vet Vale destacar que toda a documenta√ß√£o de refer√™ncia utilizada foi baseada na vers√£o 1.15.6 linux/amd64, obtida pela imagem oficial da linguagem Go no Docker Hub.
Dando sequ√™ncia do artigo anterior, veremos mais detalhes de outros comandos da ferramenta CLI.</description>
    </item>
    
    <item>
      <title>Go: comandos CLI, parte 1</title>
      <link>https://devdrops.github.io/posts/go-comandos-cli-parte-1/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/go-comandos-cli-parte-1/</guid>
      <description>Por curiosidade e vontade de aprender mais, fiquei intrigado com a quantidade de comandos dispon√≠veis pela ferramenta CLI Go.
Este texto faz parte de uma s√©rie de 3 materiais no assunto:
Parte 1: bug, build, clean e doc Parte 2: env, fix, fmt, generate, get e install Parte 3: list, mod, run, test, tool, version e vet Vale destacar que toda a documenta√ß√£o de refer√™ncia utilizada foi baseada na vers√£o 1.</description>
    </item>
    
    <item>
      <title>tmux: Migrando de 2.3.* para 3.*</title>
      <link>https://devdrops.github.io/posts/tmux-migrando-de-2.3-para-3/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://devdrops.github.io/posts/tmux-migrando-de-2.3-para-3/</guid>
      <description>Ol√°!
H√° poucos dias atr√°s, atualizei a vers√£o do Linux Mint no meu computador pessoal de 19 para 20, e fiquei feliz que nessa atualiza√ß√£o a vers√£o oferecida por padr√£o tanto do tmux como do tmate s√£o bem mais recentes do que eu estava usando:
~ apt-cache show tmux # Entre v√°rias informa√ß√µes √∫teis, olha a vers√£o logo ali: Package: tmux Architecture: amd64 Version: 3.0a-2 ~ apt-cache show tmate # E a vers√£o do tmate tamb√©m: Package: tmate Architecture: amd64 Version: 2.</description>
    </item>
    
  </channel>
</rss>
